service: xyvo-auth-handler

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  memorySize: 256
  timeout: 15

  environment:
    NODE_ENV: ${env:NODE_ENV}
    XYVO_REGION: us-east-2
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    JWT_SECRET: ${env:JWT_SECRET}
    ACCOUNT_ID: ${env:ACCOUNT_ID}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminGetUser"
        - "cognito-idp:InitiateAuth"
        - "cognito-idp:SignUp"
        - "cognito-idp:AdminConfirmSignUp"
        - "cognito-idp:AdminAddUserToGroup"
        - "cognito-idp:RevokeToken"
        - "cognito-idp:AdminInitiateAuth"
      Resource: "arn:aws:cognito-idp:${self:provider.region}:${env:ACCOUNT_ID}:userpool/${env:COGNITO_USER_POOL_ID}"

functions:
  authApi:
    handler: index.handler
    events:
      # üîê Auth
      - http: { path: "auth/signin", method: post }
      - http: { path: "auth/signin", method: options }
      - http: { path: "auth/signup", method: post }
      - http: { path: "auth/signup", method: options }
      - http: { path: "auth/signout", method: post }
      - http: { path: "auth/signout", method: options }
      - http: { path: "auth/me", method: get }
      - http: { path: "auth/me", method: options }
      - http: { path: "auth/refresh", method: post }
      - http: { path: "auth/refresh", method: options }
      - http: { path: "auth/process-social-login", method: post }
      - http: { path: "auth/process-social-login", method: options }
      - http: { path: "auth/complete-social-signup", method: post }
      - http: { path: "auth/complete-social-signup", method: options }

      # üßç‚Äç‚ôÇÔ∏è Users
      - http: { path: "users", method: get }
      - http: { path: "users", method: options }
      - http: { path: "users/{id}", method: get }
      - http: { path: "users/{id}", method: patch }
      - http: { path: "users/{id}", method: delete }
      - http: { path: "users/{id}", method: options }

      # üè¢ Organizations
      - http: { path: "organizations", method: get }
      - http: { path: "organizations", method: post }
      - http: { path: "organizations", method: options }
      - http: { path: "organizations/{id}", method: get }
      - http: { path: "organizations/{id}", method: patch }
      - http: { path: "organizations/{id}", method: delete }
      - http: { path: "organizations/{id}", method: options }

      # üë• Teams
      - http: { path: "teams", method: get }
      - http: { path: "teams", method: post }
      - http: { path: "teams", method: options }
      - http: { path: "teams/{id}", method: get }
      - http: { path: "teams/{id}", method: patch }
      - http: { path: "teams/{id}", method: delete }
      - http: { path: "teams/{id}", method: options }

      # üßë‚Äçü§ù‚Äçüßë Team Members
      - http: { path: "team-members", method: get }
      - http: { path: "team-members", method: post }
      - http: { path: "team-members", method: options }
      - http: { path: "team-members/team/{teamId}", method: get }
      - http: { path: "team-members/team/{teamId}", method: options }
      - http: { path: "team-members/user/{userId}", method: get }
      - http: { path: "team-members/user/{userId}", method: options }
      - http: { path: "team-members/{id}", method: patch }
      - http: { path: "team-members/{id}", method: delete }
      - http: { path: "team-members/{id}", method: options }

      # üìÅ Projects
      - http: { path: "projects", method: get }
      - http: { path: "projects", method: post }
      - http: { path: "projects", method: options }
      - http: { path: "projects/{id}", method: get }
      - http: { path: "projects/{id}", method: patch }
      - http: { path: "projects/{id}", method: delete }
      - http: { path: "projects/{id}", method: options }

      # üßæ Sprints
      - http: { path: "sprints", method: get }
      - http: { path: "sprints", method: post }
      - http: { path: "sprints", method: options }
      - http: { path: "sprints/{id}", method: get }
      - http: { path: "sprints/{id}", method: patch }
      - http: { path: "sprints/{id}", method: delete }
      - http: { path: "sprints/{id}", method: options }

      # üìã Backlogs
      - http: { path: "backlogs", method: get }
      - http: { path: "backlogs", method: post }
      - http: { path: "backlogs", method: options }
      - http: { path: "backlogs/{id}", method: get }
      - http: { path: "backlogs/{id}", method: patch }
      - http: { path: "backlogs/{id}", method: delete }
      - http: { path: "backlogs/{id}", method: options }

      # üîê User Permissions
      - http: { path: "user-permissions", method: get }
      - http: { path: "user-permissions", method: post }
      - http: { path: "user-permissions", method: options }

      - http: { path: "user-permissions/user/{userId}", method: get }
      - http: { path: "user-permissions/user/{userId}", method: options }

      - http:
          {
            path: "user-permissions/resource/{resourceType}/{resourceId}",
            method: get,
          }
      - http:
          {
            path: "user-permissions/resource/{resourceType}/{resourceId}",
            method: options,
          }

      - http: { path: "user-permissions/{id}", method: patch }
      - http: { path: "user-permissions/{id}", method: delete }
      - http: { path: "user-permissions/{id}", method: options }

      # ‚öôÔ∏è Internal
      - http: { path: "health", method: get }
      - http: { path: "health", method: options }
      - http: { path: "docs", method: get }
      - http: { path: "docs", method: options }

      # üîê Permissions
      - http: { path: "permissions", method: get }
      - http: { path: "permissions", method: options }

package:
  individually: true
  patterns:
    - "!node_modules/aws-sdk/**"
    - "!**/*.test.js"

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: auth.xyvo.ca
    basePath: ""
    stage: live
    certificateName: auth.xyvo.ca
    endpointType: "edge"
    createRoute53Record: false
